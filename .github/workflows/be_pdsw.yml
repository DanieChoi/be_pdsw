# Repository의 Actions 탭에 나타날 Workflow 이름으로 필수 옵션은 아니다.
name: Backend for CI/CD

# Workflow를 실행시키기 위한 Event 목록
# main 브런치에 대한 변경 사항(push, pull_request)을 감지하면 해당 브런치에 CI Workflow를 실행한다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
# 해당 Workflow의 하나 이상의 Job 목록
jobs:

  # Job 이름으로, build라는 이름으로 Job이 표시
  build:

    # Runner가 실행되는 환경을 정의하는 부분
    runs-on: ubuntu-latest
    
    # Workflow가 레포지토리의 콘텐츠에 대해서 읽기 권한만 가지도록 한다.
    # 즉, Workflow가 레포지토리의 콘텐츠를 실수로 변경하거나 삭제하는 것을 방지할 수 있다.
    permissions:
      contents: read

    # build Job 내의 step 목록
    steps:
      # uses 키워드를 통해 Action을 불러올 수 있다.
      # 해당 레포지토리를 check-out하여 레포지토리에 접근할 수 있는 Actions을 불러온다. (@v4은 버전)
      - uses: actions/checkout@v4
      
      # 해당 서비스는 자바 스프링을 활용했기 때문에 jdk 17버전을 설정(설치)
      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          # Action에 전달할 매개변수 지정
          java-version: '17'
          distribution: 'temurin'
          cache: gradle # 빌드 속도를 높이기 위해 gradle 캐시 설정 (매번 gradle 종속성을 계속 설치할 순 없으니)

      # application.yml 동적 생성
      # 소스 코드내에 위치 (덮어쓰기?, 신규작성?)
      # RDS 세팅된 이후 진행
      # 현재는 skip
      - name: application.yml 동적 생성
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_PRO }}" > ./src/main/resources/application.yml
          
      # build 준비
      # chmod +x ./gradlew : 퍼미션 오류 발생시 처리
      # ./gradlew clean build
      - name: 단위 테스트 및 빌드
        # 명령어가 여러개면 | 추가
        # 1. 빌드용 쉘스크립트(gradlew)를 퍼미션 조정
        # 2. 빌드
        # 3. 현재 위치 확인
        #    /home/runner/work/demo-deploy/demo-deploy
        # 4. 현재 위치 목록
        #    build ... src
        # 5. 빌드된 산출물의 목록 확인
        #    demo-deploy-0.0.1-SNAPSHOT-plain.jar ...
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      # 이름이 너무 길므로 적당하게 수정 -> 리눅스 명령어
      # 파일 위치를 변경하면서 이름도 변경 -> mv
      - name: 관리상 빌드된 결과물의 이름을 변경 처리
        run: |
          mv ./build/libs/*SNAPSHOT.jar ./fe_pdsw.jar
          ls

      # 서버(PDSW)로 업로드
      # https://github.com/appleboy/scp-action
      # SSH를 통해서 파일등을 복사(업로드)
      # 호스트정보(IP), 접속자명(root), 키파일(pem) -> 시크릿!!
      # PDSW_HOST
      # 업로드 대상(fe_pdsw.jar)
      # 타겟(PDSW)의 특정 경로(복사될 위치), /home/nexus/fe_pdsw
      - name: 서버(PDSW)에 jar파일 업로드
        uses: appleboy/scp-action@v0.1.7
        # 위의 액션을 위한 파라미터
        # SSH의 포트를 보안상 이유로 22->다른번호변경 했다면
        # PORT 설정 필요
        # 파일이 여러개면 "파일, 파일, ... "
        # 원격 서버에 폴더도 자동 생성되는지 검토
        with:
          host: ${{ secrets.PDSW_HOST }}
          username: ${{ secrets.PDSW_USER }}
          key: ${{ secrets.PDSW_KEY }}
          source: fe_pdsw.jar
          target: /home/nexus/fe_pdsw


  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
